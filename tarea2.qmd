---
title: "Tarea 2: Análisis de un RNASeq"
subtitle: "Bioinformática estadística"
author:
  - name: "Adrià Martínez García"
    affiliation: "Universitat de València"
    email: "adria2@alumni.uv.es"
date: "`r Sys.Date()`"
format: 
    html:
      embed-resources: true
      toc: true
      toc-depth: 3
      number-sections: true
      theme: cerulean
      code-fold: true
      code-tools: false
      code-links:
      - text: Download Quarto
        icon: file-code
        href: https://github.com/adriamartinezg/Estadistica
css: styles.css
---

```{r}
#| label: setup
#| include: false
#| echo: false
knitr::opts_knit$set(root.dir = "C:/Users/adria/Desktop/Master/Bioinformática estadística/")
```

# Elección del estudio

En este caso, se ha buscado en el *European Nucleotide Archive* (ENA), un dataset de RNASeq de *Caenorharbditis elegans* con ID del proyecto PRJNA701955, con correspondencia también en SRA y GEO, donde se pueden consultar más fácilmente los metadatos. Se compone de 18 muestras de fiferentes cepas de *C. elegans*, donde 9 han estado sometidas a hipoxia, mientras que el resto actúan como controles. En este caso se puede analizar qué genes pueden cambiar su expresión al cambiar esta condición experimental. Además, algunos de estos individuos son mutantes (*knock-out*) para distintos genes relacionados con la respuesta a hipoxia, como *hif-1* o *nhr*.

# Obtención de la matriz de conteos

Para la descarga y el alineamiento de las muestras (en bash), se ha usado el archivo comprimido `fastq` que proporcionaba el ENA para cada una de las muestras, y se ha alineado contra el genoma de referencia indexado de *C. elegans* mediante el programa *Bowtie2* (este programa permite usar los archivos `fastq` sin descomprimirlos, es decir, en formato .fastq.gz). En todos los casos, se han usado lecturas pareadas. Seguidamente, el archivo SAM de salida, se ha transformado en `.bam` y se ha indexado mediante las *Samtools*. Los archivo sobrantes se han eliminado para un mejor manejo del almacenamiento. A continuación se puede ver un ejemplo del programa, para la primera muestra analizada:

``` {.bash}
# PRJNA701955

#Genoma de referencia
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/985/GCF_000002985.6_WBcel235/GCF_000002985.6_WBcel235_genomic.fna.gz
gzip -d GCF_000002985.6_WBcel235_genomic.fna.gz
mv GCF_000002985.6_WBcel235_genomic.fna celegans.fna

echo "Indexando el genoma..."
bowtie2-build celegans.fna celegans

# Muestra 1
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR137/024/SRR13712624/SRR13712624_1.fastq.gz
wget -nc ftp://ftp.sra.ebi.ac.uk/vol1/fastq/SRR137/024/SRR13712624/SRR13712624_2.fastq.gz
echo "Alineando..."
bowtie2 -x celegans -1 SRR13712624_1.fastq.gz -2 SRR13712624_2.fastq.gz -S SRR13712624.sam
rm SRR13712624_1.fastq.gz SRR13712624_2.fastq.gz
samtools view -bS SRR13712624.sam > SRR13712624.bam
rm SRR13712624.sam
samtools sort SRR13712624.bam -o SRR13712624.sorted.bam
rm SRR13712624.bam
```

También habrá que descargar el archivo de anotación para *C. elegans*:

``` {.bash}
wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/002/985/GCF_000002985.6_WBcel235/GCF_000002985.6_WBcel235_genomic.gff.gz 
gzip -d GCF_000002985.6_WBcel235_genomic.gff.gz
mv GCF_000002985.6_WBcel235_genomic.gff celegans.gff3
```

El siguiente código, ya en el lenguaje R, permite crear la matriz de conteos, con las lecturas que cubre cada posición del genoma, a partir de los archivos `.bam` indexados de cada una de las lecturas realizadas con Illumina.

```{r}
#| label: matrix_conteos
#| eval: false


dir.create("~/R/library", recursive = TRUE, showWarnings = FALSE)
.libPaths(c("~/R/library", .libPaths()))

if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager", lib = "~/R/library")

BiocManager::install(c("Rsamtools", "GenomicFeatures", "GenomicAlignments", "org.Ce.eg.db"),
                     lib = "~/R/library")
pacman::p_load(Rsamtools,GenomicFeatures,GenomicAlignments,org.Ce.eg.db)
gtfFile = "celegans.gff3"
txdb = makeTxDbFromGFF(gtfFile, format="gff3")
genes = exonsBy(txdb, by="gene")
indir = getwd()
files = list.files(indir, pattern = '*sorted.bam')
bamLst = BamFileList(files, index=character(),obeyQname=TRUE)
PRJNA701955 = summarizeOverlaps(features = genes,
read=bamLst,
mode="Union",
singleEnd=FALSE,
ignore.strand=TRUE,
fragments=FALSE)
save(PRJNA701955,file="PRJNA701955.rda")
```

Esta matriz de conteos se almacena mediante un archivo *rda*, que posteriormente se podrá cargar para realizar los análisis pertinentes.

# Construcción del Summarized Experiment

```{r}
#| label: carga_datos
#| echo: true
load("PRJNA701955.rda")
```

En primer lugar cargamos los datos obtenidos y los paquetes necesarios que se utilizarán para construir un objeto S4 Summarized Experiment:

```{r}
#| label: paquetes
#| echo: true
#| output: false
#| warning: false

library(Biobase)
library(SummarizedExperiment)
pacman::p_load("org.Ce.eg.db")
library(dplyr)
```

Seguidamente, se guardarán en diferentes variables la matriz de conteos, los rowData y los colData (metadatos) para construir este objeto. Los metadatos se han obtenido de la web SRA correspondiente con el estudio seleccionado, y se ha leído el CSV correspondiente, añadiendo los metadatos importantes. Por otro lado, con los rowData (o datos fenotípicos) se le ha asignado a cada uno de los símbolos de genes de *Caenoharbditis elegans* una correspondencia con las bases de datos *ENSEMBL*, *GeneOntology*, *ENTREZ* y *WORMBASE*, así como el nombre del gen y su símbolo.

Para un manejo de los grupos más sencillo posteriormente, se ha categorizado la columna *oxygen_exposure* en control (con un 21% de oxígeno), o hipoxia (con un 0.5% de oxígeno).

```{r}
#| label: crear_datos
#| echo: true
#| include: false

# Matriz de conteos
conteo<-assay(PRJNA701955)

# Homogeneizar los nombres de las muestras
colnames(conteo) <- gsub(".sorted.bam", "", colnames(conteo), fixed = TRUE)

# rowData y correspondencias
row_data <- DataFrame(
  Symbol = rownames(conteo),
  ENSEMBL = mapIds(org.Ce.eg.db, 
                   keys = rownames(conteo),
                   keytype = "SYMBOL",
                   column = "ENSEMBL"),
  ENTREZID = mapIds(org.Ce.eg.db, 
                  keys = rownames(conteo),
                  keytype = "SYMBOL",
                  column = "ENTREZID"),
  GO = mapIds(org.Ce.eg.db, 
              keys = rownames(conteo),
              keytype = "SYMBOL",
              column = "GO"),
  WORMBASE = mapIds(org.Ce.eg.db, 
                    keys = rownames(conteo),
                    keytype = "SYMBOL",
                    column = "WORMBASE"),
  GENENAME = mapIds(org.Ce.eg.db, 
                    keys = rownames(conteo),
                    keytype = "SYMBOL",
                    column = "GENENAME"),
  stringsAsFactors = FALSE
)

# Categorización del oxygen_exposure
csv_rowdata<-read.csv("SraRunTable.csv", sep=",")
csv_rowdata <- csv_rowdata %>%
  mutate(Group = ifelse(oxygen_exposure == "21%", "control", "hypoxia"))
write.csv(csv_rowdata, 'SraRunTable.csv', row.names = FALSE)

# Códigos ENTREZ como nombres de columna
# Mejor manejo posterior de los datos
rownames(conteo) <- row_data$ENTREZID

# colData
metadatos<-read.csv("SraRunTable.csv", sep=",")
col_data <- metadatos %>%
  dplyr::select(
    Run, 
    LibraryLayout,
    genotype,
    oxygen_exposure,
    Group,
    source_name,
    Instrument,
    LibrarySelection,
    LibrarySource
  ) %>%
  dplyr::rename(
    SampleID = Run,
    Condition = oxygen_exposure,
    Tissue = source_name
  ) %>%
  as.data.frame()

rownames(col_data) <- col_data$SampleID
```

Finalmente, con estas variables se ha construido el `SummarizedExperiment` final, que se usará posteriormente para el análisis.

```{r}
#| label: crear_SE

PRJNA701955_SE <- SummarizedExperiment(
  assays   = list(counts = conteo),
  rowData  = row_data,
  colData  = col_data
)
```

Este Summarized Experiment puede descargarse usando el siguiente código:

```{r}
#| label: download_SE
#| eval: false

save(PRJNA701955_SE, file="PRJNA701955_SE.rda")
```

# Análisis de expresión diferencial

Realizaremos el análisis de expresión diferencial usando el paquete `edgeR`. Siempre que sea posible se aplicará tanto el test exacto como el test que usa un modelo lineal generalizado (mediante una distribución binomial negativa) para realizar los análisis.

Inicialmente, se transformarán los distintos grupos con los que se trabajará en variables `factor`, con dos niveles cada uno. Para un mejor análisis, se agruparán en una variable categórica "mutant" todas las muestras que no sean *wild-type*, y se contrastarán con esta, para ver posibles efectos de los *KO*. Por otro lado se evaluará el efecto de la hipoxia y finalmente, solo meidante test con un modelo lineal generalizado se evaaluará la posible interacción de ambas condiciones.

A continuación se preprocesarán las muestras, eliminando aquellas con datos faltantes. Se usarán los conteos por millón para reestructurar el tamaño de las librerías y normalizar así los datos de conteo obtenidos por la secuenciación. También, se eliminarán los genes con conteos bajos:

```{r}
#| label: preprocess_dge
#| warning: false
#| output: false

library(edgeR)

# Variables a factor

colData(PRJNA701955_SE)$Group<-factor(colData(
  PRJNA701955_SE)$Group, levels = c("control", "hypoxia"))
colData(PRJNA701955_SE)$mutant <- ifelse(colData(
  PRJNA701955_SE)$genotype == "N2", "WT", "MUT")
colData(PRJNA701955_SE)$mutant <- factor(colData(
  PRJNA701955_SE)$mutant, levels = c("WT", "MUT"))

# Eliminar datos faltantes

elim<-which(is.na(colData(PRJNA701955_SE)$"Group")|is.na(
  colData(PRJNA701955_SE)$"mutant"))
if (length(elim) > 0) {
  PRJNA701955_SE <- PRJNA701955_SE[, -elim]
}

# Normalizar y eliminar bajos conteos

count_matrix <- assay(PRJNA701955_SE, "counts")
dge<-DGEList(counts = count_matrix)
to_keep = rowSums(cpm(dge) > 0.5) >= 9
dge = dge[to_keep,keep.lib.sizes=FALSE]
```

También se crea un objeto `data.frame`con todas las anotaciones de los genes que componen el `SummarizedExperiment`:

```{r}
#| label: anotaciones

annot <- as.data.frame(rowData(PRJNA701955_SE))
```

## Función de reporte de genes estadísticamente significativos:

Antes de proceder a realizar los análisis de expresión diferencial se muestra la función creada para reportar mediante una tabla en formato HTML los genes que resulten tener una significancia eestadística en los análisis realizados. Además se incluyen varios enlaces a bases de datos como ENTREZ, ENSEMBL, GENE ONTOLOGY o WORMBASE a partir de los respectivos códigos, para cada uno de ellos:

```{r}
#| label: funcion_tabla_html

generate_gene_report <- function(df, fdr_column = "FDR",
                                 title="", fdr_threshold = 0.05) {
  require(dplyr)
  require(DT)
  require(tami)
  require(htmltools)
  
  report_df <- df %>%
    dplyr::filter(FDR < fdr_threshold) %>%
    dplyr::arrange(FDR) %>%
    dplyr::mutate(
      Entrez_Link = if ("ENTREZID" %in% colnames(.)) {
        ifelse(!is.na(ENTREZID) & ENTREZID != "", tami::entrezid2url(ENTREZID), NA_character_)
      },
      Ensembl_Link = if ("ENSEMBL" %in% colnames(.)) {
        ifelse(!is.na(ENSEMBL) & ENSEMBL != "", tami::ensembl2url(ENSEMBL), NA_character_)
      },
      GO_Link = if ("GO" %in% colnames(.)) {
        ifelse(!is.na(GO) & GO != "", tami::go2url(GO), NA_character_)
      },
      WormBase_Link = if ("WORMBASE" %in% colnames(.)) {
        ifelse(!is.na(WORMBASE) & WORMBASE != "", tami::WormBase2url(WORMBASE), NA_character_)
      } 
    ) %>%
    dplyr::select(Symbol, GENENAME, logFC, PValue, fdr_column,
                  Entrez_Link, Ensembl_Link, GO_Link, WormBase_Link)
  
  datatable_report <- DT::datatable(
    report_df,
    escape = FALSE,
    extensions = c('Buttons', 'Scroller'),
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf'),
      scrollX = TRUE,
      pageLength = 10,
      columnDefs = list(
        list(
          targets = which(grepl("_Link$", colnames(report_df))) - 1,
          render = JS(
            "
            function(data, type, row) {
              if (data === null || data === undefined || data === 'NA' || data === '') {
                return '';
              }
              return data;
            }
          "),
          className = 'dt-center',
          defaultContent = ''  
        )
      ),
      language = list(
        emptyTable = "No hay datos disponibles" 
      )
    ),
    rownames = FALSE,
    class = 'display nowrap'
  )
    htmltools::tagList(
    htmltools::tags$h3(title),
    datatable_report
  )
}
```

Esta función permite, a partir de un `data.frame` construir una tabla en formato HTML. Deberán prefijarse el nombre de la columna del p-valor ajustado (según el test puede ser FDR o adj.P.Val), fijar una tasa de falso descubrimiento (por defecto 0.05) y opcionalmente, un título para la tabla.

Mediante la siguiente función, dicha tabla podrá descargarse:

```{r}
#| label: descargar_report_html

save_gene_report_html <- function(widget,
                                  file = "gene_report.html",
                                  title = "Análisis de expresión génica",
                                  color = "white",
                                  selfcontained = TRUE) {
  requireNamespace("htmlwidgets", quietly = TRUE)
  
  htmlwidgets::saveWidget(
    widget = widget,
    file = file,
    title = title,
    background = background,
    selfcontained = selfcontained
  )
}
```

Esta función permite personalizar el nombre del archivo, el título, así como el color del fondo. Por defecto evita la aparición de advertenias y embebe todos los recursos en el HTML, evitando depender de carpetas externas.

## Análisis con edgeR clásico

Una vez realizado este preprocesado, se realiza el análisis de expresión diferencial usando el test exacto clásico. Para construir el objeto DGEList, se ha usado la matriz de conteos filtrada anteriormente. En este caso se ha decidido estimar únicamente la dispersión común y no para cada gen (*Tagwise*).

### ¿Afecta la hipoxia a la expresión de genes?

En este caso se ha comparado la condición control contra hipoxia:

```{r}
#| label: edgeR_clásico_hipoxia

exact<-DGEList(counts=dge$counts, group=PRJNA701955_SE$Group)

dge.c<-estimateCommonDisp(exact)
et.c<-exactTest(dge.c)
tt_exact_hyp<-topTags(et.c, n=Inf, adjust.method = "BH", 
                  sort.by = "none")$table
```

A continuación se muestra la tabla, en formato HTML de los genes estadísticamente significativos (FDR = 0.05), para la variable hipoxia, respecto el control, usando las anotaciones realizadas anteriormente. También se incluyen los links a distintas bases de datos, construidos mediante el paquete `tami`:

```{r}
#| label: dataframe_exact_hyp_html
#| warning: false

# echo: false

# Este código no se mostraria, mostrando solo la salida
exactdf_hyp <- as.data.frame(tt_exact_hyp)
exact_annotated_hyp <- merge(exactdf_hyp, annot, by = "row.names", all.x = TRUE)

datatable_report_exact_hyp <- generate_gene_report(
  df = exact_annotated_hyp,
  fdr_column = "FDR",
  title = "Evaluación del efecto de la hipoxia con edgeR clásico"
)

datatable_report_exact_hyp
```

La tabla se puede descargar ejecutando el siguiente código:

```{r}
#| label: descargar_html
#| eval: false

save_gene_report_html(
  widget = datatable_report_exact_hyp,
  file = "classicaledger_hypoxia.html",
  title = "Análisis de Genes Diferenciales de RNASeq en hipoxia"
)
```


Todos estos genes estadísticamente significativos pueden dividirse en dos grupos: aquellos que están sobreexpresados y los que su expresión disminuye, respecto a la condición de normoxia. Así, puede representarse su logFC en una representación tipo *vulcano*, con el p-valor ajustado (FDR) como variable y para ver la distribución de los mismos:

```{r}
#| label: vulcano_exact_hyp
#| warning: false
library(ggplot2)
library(plotly)

sig_genes <- subset(tt_exact_hyp, FDR < 0.05)
sig_genes$Regulacion <- ifelse(sig_genes$logFC > 0, "Up-regulated", "Down-regulated")
table(sig_genes$Regulacion)

plot_hyp<-ggplot(sig_genes, aes(x = logFC, y = -log10(FDR), color = Regulacion)) +
  geom_point(alpha = 0.8) +
  scale_color_manual(values = c("Up-regulated" = "red", "Down-regulated" = "blue")) +
  theme_minimal() +
  labs(
    title = "Volcano Plot: Análisis del efecto de la hipoxia en C.elegans",
    x = "Log2 Fold Change",
    y = "-Log10 FDR"
  )

ggplotly(plot_hyp, tooltip = "text")
```

En este caso, de los 1359 genes con significancia, hay más que se encuentran sobreexpresados que infraexpresados. Esta tendencia se confirmará después mediante el test edgeR usando un modelo lineal generalizado, que ajusta mejor el modelo a la realidad.

### ¿Mutaciones en el genoma cambian la expresión de genes?

```{r}
#| label: edgeR_clásico_mutantes

exact<-DGEList(counts=dge$counts, group=PRJNA701955_SE$mutant)

dge.c<-estimateCommonDisp(exact)
et.c<-exactTest(dge.c)
tt_exact_mut<-topTags(et.c, n=Inf, adjust.method = "BH", 
                  sort.by = "none")$table
```


En este caso, se encuentran los siguientes genes siignificativos, con una tasa de falso positivo de 0.05:

```{r}
#| label: dataframe_exact_mut_html
#| warning: false

# echo: false

# Este código no se mostraria, mostrando solo la salida
exactdf_mut <- as.data.frame(tt_exact_mut)
exact_annotated_mut <- merge(exactdf_mut, annot, by = "row.names", all.x = TRUE)

datatable_report_exact_mut <- generate_gene_report(
  df = exact_annotated_mut,
  fdr_column = "FDR",
  title = "Evaluación del efecto de los knock-out con edgeR clásico"
)

datatable_report_exact_mut
```

Se descargaría ejecutando el siguiente comando:

```{r}
#| label: descargar_html_2
#| eval: false

save_gene_report_html(
  widget = datatable_report_exact_mut,
  file = "classicaledger_mut.html",
  title = "Análisis de Genes Diferenciales de RNASeq en KO"
)
```

Representamos también aquí la representación *vulcano* en este caso para comprobar qué efecto tiene la deleción de ciertos genes relacionados con la hipoxia en estos nemátodos. Se espera que hayan genes con menor exxpresión, conducidos por la falta de genes y factores de transcripción que se activan en hipoxia, pero también que haya una respuesta a esta deifiencia activandose otras vías:

```{r}
#| label: vulcano_exact_mut
#| warning: false

sig_genes <- subset(tt_exact_mut, FDR < 0.05)
sig_genes$Regulacion <- ifelse(sig_genes$logFC > 0, "Up-regulated", "Down-regulated")

table(sig_genes$Regulacion)

plot_hyp<-ggplot(sig_genes, aes(x = logFC, y = -log10(FDR), color = Regulacion)) +
  geom_point(alpha = 0.8) +
  scale_color_manual(values = c("Up-regulated" = "red", "Down-regulated" = "blue")) +
  theme_minimal() +
  labs(
    title = "Volcano Plot: Análisis del efecto de knock-out para genes relacionados con hipoxia en C.elegans",
    x = "Log2 Fold Change",
    y = "-Log10 FDR"
  )

ggplotly(plot_hyp, tooltip = "text")
```

Tal como era esperable, hay 32 genes que se encuentran down-regulated, ya que tendrán algún tipo de interacción o su expresión dependerá de los genes deplecionados, mientras que los 149 sobreexpresados, probablemente lo serán como respuesta a esta falta de ciertos genes.
El análisis mediante un modelo lineal generalizado confirmará estos resultados, mientras que su función se podrá conocer mediante un análisis de sobrerepresentación, teniendo en cuenta distintas colecciones de genes.

## Análisis con edgeR usando un modelo lineal generalizado

Este análisis de expresión diferencial puede realizarse también usando modelo lineal generalizado. Para estimar la dispersión se usará el método GLMCommon. Una vez obtenida la dispersión, se preparan los contrastes para ver cómo afecta la hipoxia en la expresión de genes, como cambia la expresión en cepas *knock-out* frente a la  *wild-tipe*, y finalmente, para evaluar si hay interacción entre la hipoxia y los mutantes para genes relacionados con la respuesta a la hipoxia:

```{r}
#| label: edgeR_glm
#| warning: false

condicion<-colData(PRJNA701955_SE)$Group
mutante<-colData(PRJNA701955_SE)$mutant
design<-model.matrix(~condicion*mutante, 
                     data = colData(PRJNA701955_SE))

dge.glm<-estimateGLMCommonDisp(dge, design)

colnames(design)<-make.names(colnames(design))
contrasts<-makeContrasts(contrast1=condicionhypoxia,
                         contrast2=mutanteMUT,
                         contrast3=condicionhypoxia.mutanteMUT,
                         levels=design)
fit=glmFit(dge.glm,design=design)
```

### ¿Afecta la hipoxia a la expresión de genes?

Evaluamos este contraste y lo convertimos en un dataframe, con las anotaciones realizadas anteriormente:

```{r}
#| label: edgerglm_hyp

lrt1<-glmLRT(fit, contrast = contrasts[,"contrast1"])
tt_glm_hyp<-topTags(lrt1, n=Inf, sort.by = "none", adjust.method = "BH")$table

tt_annotated_glm_hyp <- merge(tt_glm_hyp, annot, by = "row.names", 
                              all.x = TRUE)
```

Si observamos qué genes estadísticamente significativos se encuentran sobreexpresados en la condición de hipoxia, y cuáles disminuyen respecto a la expresión media (*down-regulated*):

```{r}
#| label: up_down_hyp_glm

sig_genes <- subset(tt_annotated_glm_hyp, FDR < 0.05)
sig_genes$Regulacion <- ifelse(sig_genes$logFC > 0, "Up-regulated", "Down-regulated")

table(sig_genes$Regulacion)
```
Se puede observar que, al ser un método con mayor potencia estadística, filtra mejor aquellos genes no significativos, para una misma tasa de error. En el test exacto había cerca de 1400 mientras que usando esa distribución binomial negativa, no llegan a los 400.

En este caso se recogen los resultados de genes diferencialmente expresados en condiciones de hipoxia, con una tasa de falso rechazo de 0.05 para la condición Grupo (hipoxia o control). Los genes *up-regulated* y *down-regulated* se dividirán en el análisis de sobrerepresentación para encontrar en qué funciones están involucrados estos genes. Antes, los resultados de significancia se muestran en el informe HTML que se genera con este código:

```{r}
#| label: html_edgerglm_hyp

datatable_report_glm_hyp <- generate_gene_report(
  df = tt_annotated_glm_hyp,
  fdr_column = "FDR",
  title = "Evaluación del efecto de la hipoxia con un modelo lineal generalizado con edgeR"
)

datatable_report_glm_hyp
```

Finalmente, se puede descargar usando el código mostrado anteriormente.


### ¿Mutaciones en el genoma cambian la expresión de genes?

Evaluamos este segundo contraste y se añaden las anotaciones realizadas anteriormente:

```{r}
#| label: edgerglm_mut

lrt2<-glmLRT(fit, contrast = contrasts[,"contrast2"])
tt_glm_mut<-topTags(lrt2, n=Inf, sort.by = "none", adjust.method = "BH")$table

tt_annotated_glm_mut <- merge(tt_glm_mut, annot, by = "row.names", 
                              all.x = TRUE)
```

Podríamos ver cuáles se encuentran sobreexpresados en el grupo de mutantes por *ko*, y los que se encuentran por debajo de la expresión media (*down-regulated*):

```{r}
#| label: up_down_mut_glm

sig_genes <- subset(tt_annotated_glm_mut, FDR < 0.05)
sig_genes$Regulacion <- ifelse(sig_genes$logFC > 0, "Up-regulated", "Down-regulated")

table(sig_genes$Regulacion)
```
Vemos que hay al igual que según la condición de oxígeno, los genes estadísticamente significativos aplicando una misma tasa de error han disminuido en este caso, pasando de unos 180 a 90 al aplicar la distribución binomial negativa. Además, siguiendo la misma tendencia que en el test exacto, hay muchos más genes up-regulated que  down-regulated. Por eso, y asumiendo que los pocos significativos por tener una baja expresión respecto la cepa *wild-type*, se eliminarán del análisis. Se mostrarán a continuación los genes estadísticamente significativos por tener una mayor expresión en las cepas mutantes respecto la control y, el análisis de sobrerepresentación se realizará con las mismas para ver qué funciones se encuentran sobreexpresadas. Los resultados se muestran en el informe HTML que se genera con este código:

```{r}
#| label: html_edgerglm_mut

tt_upregulated_glm_mut<-subset(tt_annotated_glm_mut, logFC>0)

datatable_report_glm_mut <- generate_gene_report(
  df = tt_upregulated_glm_mut,
  fdr_column = "FDR",
  title = "Evaluación del efecto de las mutaciones con un modelo lineal generalizado con edgeR (genes sobreexpresados en esta condición)"
)

datatable_report_glm_mut
```

También se puede descargar usando el código mostrado anteriormente.

### ¿Hay alguna interacción entre la hipoxia y mutantes de genes relacionados con la respuesta a ella?

Para finalizar este apartado de expresión diferencial de genes, se evaluará si hay efecto de la interacción entre hipoxia y cepas con mutaciones para genes responsables de la adaptación a esta condición, de la misma manera que en los anteriores casos:

```{r}
#| label: edgerglm_int

lrt3<-glmLRT(fit, contrast = contrasts[,"contrast3"])
tt_glm_int<-topTags(lrt3, n=Inf, sort.by = "none", adjust.method = "BH")$table

tt_annotated_glm_int <- merge(tt_glm_int, annot, by = "row.names", 
                              all.x = TRUE)
```

Se muestran los genes diferencialmente expresados, con una FDR de 0.05, en una tabla en formato HTML que puede ser descargada usando la función mostrada anteriormente:

```{r}
#| label: html_edgerglm_int

datatable_report_glm_int <- generate_gene_report(
  df = tt_annotated_glm_int,
  fdr_column = "FDR",
  title = "Evaluación de la interacción de la hipoxia y las mutaciones con un modelo lineal generalizado con edgeR"
)

datatable_report_glm_int
```

La presencia de pocos genes significativos en la interacción, así como la función desconocida de ellos, sugiere que no hay ninguna función asociada a la interacción cepa:hipoxia, aunque esta hipótesis deberá confirmarse en un análisis posterior de sobrerepresentación.

# Colecciones de genes

Una vez realizado el análisis de expresión diferencial, es conveniente saber si los mismos pertenecen a un grupo que comparte una función biológica. Para ello se obtendrán las colecciones correspondientes a *C. elegans* para las bases de datos *Gene Ontology* y *KEGG*. A continuación, estas se usarán para realizar para comprobar si algunas de las colecciones está sobrerepresentada (mediante los genes estadísticamente significativos) y finalmente se realizará un análisis paralelo de grupos de genes, mediante todos los genes que han obtenido cobertura al realizar el procedimiento de RNASeq.

## Obtención de las colecciones de genes

A continuación, se crearán las collecciones de genes procedentes tanto de GeneOntology como de KEGG, que se usarán posteriormente para el análisis de grupos:

```{r}
#| label: gsc
#| warning: false

library(celegans.db)
library(GO.db)
library(GSEABase)

#GO
frame = toTable(org.Ce.egGO) 
goframeData = data.frame(frame$go_id, frame$Evidence, frame$gene_id) 
goFrame = GOFrame(goframeData, organism = "Caenorhabditis elegans") 
goAllFrame = GOAllFrame(goFrame) 
gscCe = GeneSetCollection(goAllFrame, setType = GOCollection()) 
gscCe = geneIds(gscCe) 
names(gscCe) <- paste0(
      names(gscCe), "_",
      Term(GOTERM[names(gscCe)])
    )

#KEGG
kegg_annotations <- as.list(org.Ce.egPATH2EG)
kegg_genesets <- lapply(names(kegg_annotations), function(pathway_id) {
  genes <- kegg_annotations[[pathway_id]]
  if (length(genes) > 0) {
    GeneSet(
      geneIds = genes,
      setName = pathway_id,  
      collectionType = KEGGCollection(),
      organism = "Caenorhabditis elegans"
    )
  }
})

gscKEGG0 <- GeneSetCollection(kegg_genesets)
gscKEGG <- geneIds(gscKEGG0)

```

Las colecciones creadas pueden guardarse usando estas funciones:

```{r}
#| label: save_gsc
#| eval: false

save(gscCe,file = "gscCe.rda")
save(gscKEGG, file = "gscKEGG_Celegans.rda")
```

## Función de reporte para colecciones de genes

Se ha adaptado la función de reporte mostrada anteriormente para poder reportar las colecciones de genes con sobrerepresentación:

```{r}
#| label: html_gsc
library(KEGGREST)
pathways <- keggList("pathway", "cel")

generate_ora_report <- function(df,
                               title = "",
                               analysis_type = c("GO", "KEGG"),
                               threshold = 0.05,
                               pathways = NULL) {
  require(dplyr)
  require(DT)
  require(tami)
  require(htmltools)
  require(tibble)
  
  analysis_type <- match.arg(analysis_type)
  df <- tibble::rownames_to_column(df, var = "Name")
  
  if (analysis_type == "KEGG") {
    if (!is.null(pathways)) {
      pathway_names <- gsub(" - Caenorhabditis elegans \\(nematode\\)", "", pathways)
      names(pathway_names) <- names(pathways)
    }
    
    report_df <- df %>%
      dplyr::filter(rawp < threshold) %>%
      dplyr::arrange(rawp) %>%
      mutate(
        ID = Name,  
        Activity = if (!is.null(pathways)) {
          ifelse(ID %in% names(pathway_names), pathway_names[ID], ID)
        } else {
          ID
        },
        Link = ifelse(!is.na(ID) & ID != "", tami::kegg2url(ID), NA_character_)
      )
  } else {
    report_df <- df %>%
      dplyr::filter(rawp < threshold) %>%
      dplyr::arrange(rawp) %>%
      mutate(
        GO_ID = sub("_.*", "", Name),
        Activity = Term(GOTERM[GO_ID]),
        Link = ifelse(!is.na(GO_ID) & GO_ID != "", tami::go2url(GO_ID), NA_character_)
      )
  }
  
  report_df <- report_df %>%
    dplyr::rename(
      `P.value` = rawp,
      `Odds.Ratio` = OR
    ) %>%
    dplyr::select(Activity, `P.value`, `Odds.Ratio`, Link) %>%
    tidyr::drop_na(Activity)
  
  dt <- DT::datatable(
    report_df,
    escape = FALSE,
    extensions = c('Buttons'),
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf'),
      pageLength = 10,
      columnDefs = list(
        list(
          targets = 3,  
          render =  DT::JS(
            "
            function(data, type, row) {
              if (data === null || data === undefined || data === 'NA' || data === '') {
                return '';
              }
              return data;
            }
          "
          ),
          className = 'dt-center'
        )
      ),
      language = list(
        emptyTable = "No hay datos disponibles" 
      )
    ),
    rownames = FALSE,
    class = 'display nowrap'
  )
  
  htmltools::tagList(
    htmltools::tags$h3(title),
    dt
  )
}
```


# Análisis de sobrerepresentación de grupos de genes

Para realizar el análisis de sobrerepresentación se utilizará el método `ora`, incluido en el paquete `tami`, que realiza un test de Fisher para comprobar cuantos genes pertenecientes a los grupos son significativos, según el *universo de genes* que tengamos.

## Análisis mediante la colección de la Gene Ontology

En primer lugar se utilizarán las colecciones de genes basadas en la base de datos *Gene Ontology*. Para un análisis que refleje mejor la realidad, se usarán los resultados correspondientes al análisis `edgeR` con un modelo lineal generalizado (concretamente, una distribución binomial negativa). Este modleo permite comparar más grupos, pudiendo interpretar así las interacciones entre grupos.

De toda la colección, únicamente se realizará el análisis para grupos que contengan entre 5 y 100 genes (evitando los grupos con pocos genes o con muchos, que no aportarán mucha información):

```{r}
#| label: filtrar_gsc

elim<-which(sapply(gscCe, length)<5 | sapply(gscCe, length)>100)
gscCe<-gscCe[-elim]
```

### ¿Qué colecciones están involucradas en la respuesta a la hipoxia?

En primer lugar se parte de los genes estadísticamente significativos para la hipoxia (FDR=0.05) y tal como se ha comentado anteriormente, se analizarán tanto sobreexpresados como con una expresión inferior a una situación de normoxia:

```{r}
#| label: ora_go_hyp_up
#| output: false

library(tami)

up_selected_genes1<-which(tt_annotated_glm_hyp$FDR<0.05 &
                            tt_annotated_glm_hyp$logFC>0)
up_entrez_selected<-as.character(tt_annotated_glm_hyp[up_selected_genes1,"ENTREZID"])
ora_hyp_glm_go_up<-ora(up_entrez_selected, gsc=gscCe)
```

Usando la función mostrada anteriormente, se pueden mostras aquellos grupos que resulten significativos, así como un enlace a la base de datos GeneOntology, donde se puede obtener más información. La descarga de estos datos se podría realizar mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_1
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_hyp_up<-generate_ora_report(ora_hyp_glm_go_up, title = "Análisis de sobrerepresentación de grupos en hipoxia para genes sobrerepresentados respecto al control", threshold=0.05, analysis_type = "GO")

informe_ora_hyp_up
```

Se representarán a continuación los grupos de genes, ordenados por su significancia y sobrerepresentación de acuerdo a su *odds ratio*, mediante un gráfico de burbujas:

```{r}
#| label: plot_go_hyp_up
#| warning: false
library(ggplot2)
library(plotly)
library(dplyr)

top_terms <- ora_hyp_glm_go_up %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var = "id") %>%
  filter(rawp < 0.05 & OR > 0) %>%
  mutate(
    logP = -log10(rawp),
    name_short = sub("GO:\\d+_", "", id),
    name_short = ifelse(nchar(name_short) > 30,
                        paste0(substr(name_short, 1, 27), "..."),
                        name_short),
    tooltip_text = paste0("Término: ", id,
                          "<br>p-valor: ", signif(rawp, 3),
                          "<br>Odds Ratio: ", signif(OR, 3))
  ) %>%
  arrange(rawp)

p <- ggplot(top_terms, aes(x = logP, y = reorder(name_short, logP))) +
  geom_point(aes(size = OR, color = OR, text = tooltip_text)) +
  scale_color_gradient(low = "skyblue", high = "darkred") +
  labs(
    title = "Top 15 grupos de genes GO sobre-representados en condición de hipoxia",
    x = "-log10(p-valor)",
    y = "Grupo de genes",
    size = "Odds Ratio",
    color = "Odds Ratio"
  ) +
  theme_minimal() +
  theme(
    theme(
  axis.text.y = element_text(size = 8),
  plot.title = element_text(size = 14, face = "bold")
)
  )

ggplotly(p, tooltip = "text")
```

Se puede observar que muchos de los conjuntos de genes están relacionadas con la defensa frente a metales pesados y frente a cambios en el equilibruo redox. Es posible que exista una relación con rutas que garantizan el equilibrio redox o de estrés oxidativo, que pueden verse desregulados por el estrés provocado por la hipoxia. También se observa por ejemplo, un aumento del metabolismo de algunos aminoácidos, usados en posibles rutas metabólicas anaeróbicas, para superar este tipo de estrés ambiental. Estas rutas se activarán para mantener la viabilidad celular, tras una disminución de las rutas metabólicas convencionales, que seguramente bajen su expresión al ser dependientes de oxígeno.

Se realiza a continuación un análisis basado en el test de Fisher, para evaluar qué colecciones de genes (con genes "infraexpresados") están sobrerepresentadas:

```{r}
#| label: ora_go_hyp_down
#| output: false

library(tami)

down_selected_genes1<-which(tt_annotated_glm_hyp$FDR<0.05 &
                            tt_annotated_glm_hyp$logFC<0)
down_entrez_selected<-as.character(tt_annotated_glm_hyp[
  down_selected_genes1,"ENTREZID"])
ora_hyp_glm_go_down<-ora(down_entrez_selected, gsc=gscCe)
```

Usando la función mostrada anteriormente, se pueden mostras aquellos grupos que resulten significativos, así como un enlace a la base de datos GeneOntology, donde se puede obtener más información. La descarga de estos datos se podría realizar mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_1_down
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_hyp_d<-generate_ora_report(ora_hyp_glm_go_down, title = "Análisis de sobrerepresentación de grupos en hipoxia (con genes con menor expresión respecto al control)", threshold=0.05, analysis_type = "GO")

informe_ora_hyp_d
```

Si se representan los grupos de genes de acuerdo a los criterios establecidos anteriormente:

```{r}
#| label: plot_go_hyp_d
#| warning: false
library(ggplot2)
library(plotly)
library(dplyr)

top_terms <- ora_hyp_glm_go_down %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var = "id") %>%
  filter(rawp < 0.05 & OR > 0) %>%
  mutate(
    logP = -log10(rawp),
    name_short = sub("GO:\\d+_", "", id),
    name_short = ifelse(nchar(name_short) > 30,
                        paste0(substr(name_short, 1, 27), "..."),
                        name_short),
    tooltip_text = paste0("Término: ", id,
                          "<br>p-valor: ", signif(rawp, 3),
                          "<br>Odds Ratio: ", signif(OR, 3))
  ) %>%
  arrange(rawp)

p <- ggplot(top_terms, aes(x = logP, y = reorder(name_short, logP))) +
  geom_point(aes(size = OR, color = OR, text = tooltip_text)) +
  scale_color_gradient(low = "skyblue", high = "darkred") +
  labs(
    title = "Top 15 grupos de genes GO sobre-representados en condición de hipoxia",
    x = "-log10(p-valor)",
    y = "Grupo de genes",
    size = "Odds Ratio",
    color = "Odds Ratio"
  ) +
  theme_minimal() +
  theme(
    theme(
  axis.text.y = element_text(size = 8),
  plot.title = element_text(size = 14, face = "bold")
)
  )

ggplotly(p, tooltip = "text")
```

Con todo esto, se puede observar confirmar que en hipoxia, hay una expresión menor en grupos de genes relacionados con el metabolismo de ácidos grasos. Esto podría ocurrir ya que,aunque es un metabolismo muy energético, tiene mucha dependencia de oxígeno, que se verá muy disminuido en esta condición.

### ¿Qué actividades se encuentran sobrerepresentadas en los organismos mutantes?

Realizamos el mismo análisis basado en el test de Fisher para ver diferencias de sobrerepresentación en el caso de los mutantes. El resultado se muestra en una tabla HTML generada con las colecciones de genes con un p-valor menor a 0.05:

```{r}
#| label: ora_go_mut
#| output: false
selected_genes2<-which(tt_upregulated_glm_mut$FDR<0.05)
entrez_selected2<-as.character(tt_annotated_glm_mut[selected_genes2,"ENTREZID"])

ora_mut_glm_go<-ora(entrez_selected2, gsc=gscCe)
```

Se muestra la tabla HTML, siguiendo el estilo anterior. La descarga también puede hacerse mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_2
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_mut<-generate_ora_report(ora_mut_glm_go, title = "Análisis de sobrerepresentación de grupos en C. elegans KO para genes de hipoxia", threshold=0.05, analysis_type = "GO")

informe_ora_mut
```

En este caso, se representarán siguiendo el mismo criterio quen en la condición anterior, la mitad de los grupos de genes que han resultado significativos en el análisis de sobre-representación usando el test de Fisher (unos 25):

```{r}
#| label: plot_go_mut
#| warning: false
top_terms <- ora_mut_glm_go %>%
  as.data.frame() %>%
  tibble::rownames_to_column(var = "id") %>%
  filter(rawp < 0.05 & OR > 0) %>%
  mutate(
    logP = -log10(rawp),
    name_short = sub("GO:\\d+_", "", id),
    name_short = ifelse(nchar(name_short) > 30,
                        paste0(substr(name_short, 1, 27), "..."),
                        name_short),
    tooltip_text = paste0("Término: ", id,
                          "<br>p-valor: ", signif(rawp, 3),
                          "<br>Odds Ratio: ", signif(OR, 3))
  ) %>%
  arrange(rawp) %>%
  slice_head(n = 25)

p <- ggplot(top_terms, aes(x = logP, y = reorder(name_short, logP))) +
  geom_point(aes(size = OR, color = OR, text = tooltip_text)) +
  scale_color_gradient(low = "skyblue", high = "darkred") +
  labs(
    title = "Top 25 grupos de genes GO sobre-representados en mutantes para genes relacionados con la hipoxia",
    x = "-log10(p-valor)",
    y = "Grupo de genes",
    size = "Odds Ratio",
    color = "Odds Ratio"
  ) +
  theme_minimal() +
  theme(
    theme(
  axis.text.y = element_text(size = 8), 
  plot.title = element_text(size = 14, face = "bold")
)
  )

ggplotly(p, tooltip = "text")
```

En el caso de los mutantes, se puede ver una gran sobrerepresentación, con una gran significancia estadística, de un grupo de genes con actividad oxidoreductasa molecular. Ciertos *ko* para genes como *hif-1*, que son factores de transcripción que se activan como respuesta a la hipoxia. Si faltan estos genes, puede estar desregulado el equilibrio redox. Así, se debe activar la actividad oxidoreductasa para mantener la viabilidad celular.
Otros grupos de genes con bastante representación son aquellos relacionados con el crecimiento de los nemátodos, como axonogénesis o meiosis. Esto podría estar relacionado con mutantes que impiden el crecimiento celular.

### ¿Hay alguna colección que indique interacción entre mutantes y la hipoxia?

```{r}
#| label: ora_go_int
#| output: false

selected_genes3<-which(tt_annotated_glm_int$FDR<0.05)
entrez_selected3<-as.character(tt_annotated_glm_int[selected_genes3,"ENTREZID"])
ora_int_glm_go<-ora(entrez_selected3, gsc=gscCe)
```

Usando la función mostrada anteriormente, se pueden mostras aquellos grupos que resulten significativos, así como un enlace a la base de datos GeneOntology, donde se puede obtener más información. La descarga de estos datos se podría realizar mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_3
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_int<-generate_ora_report(ora_int_glm_go, title = "Análisis de sobrerepresentación de grupos con la interacción de mutantes e hipoxia", threshold=0.05, analysis_type = "GO")

informe_ora_int
```

Tal y como era esperable después de ver los genes estadísticamente significativos, no aparece ninguna interacción de distintos grupos de genes asociados en una función tras realizar el análisis de sobrerepresentación basado en el test de Fisher.
Así, aunque sí que hay efectos de expresión en hipoxia, y la generación de mutantes asociados a genes de adaptación a la misma también se ven afectados, no hay nada que permita asociar un mayor o menor cambio de la respuesta a la hipoxia según si tienes estos genes eliminados o no.

## Análisis mediante la colección KEGG

Seguidamente, se utilizarán las colecciones de genes basadas en la base de datos *KEGG*, permitiendo conocer en que rutas metabólicas están involucrados los genes estadísticamente significativos. También se usarán únicamente los resultados correspondientes al análisis *edgeR* con un modelo lineal generalizado comparando asó más grupos, y viendo el efecto de las interacciones entre ellos.

```{r}
#| label: filtrar_kegg

elim<-which(sapply(gscKEGG, length)<5)
gscKEGG<-gscKEGG[-elim]
```

### ¿Qué colecciones están involucradas en la respuesta a la hipoxia?

En primer lugar se parte de los genes estadísticamente significativos para la hipoxia (FDR=0.05):

```{r}
#| label: ora_kegg_hyp
#| output: false
selected_genes1<-which(tt_annotated_glm_hyp$FDR<0.05)
entrez_selected<-as.character(tt_annotated_glm_hyp[selected_genes1,"ENTREZID"])
ora_hyp_glm_kegg<-ora(entrez_selected, gsc=gscKEGG)
```

Usando la función mostrada anteriormente, se pueden mostras aquellos grupos que resulten significativos, así como un enlace a la base de datos GeneOntology, donde se puede obtener más información. La descarga de estos datos se podría realizar mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_4
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_hyp<-generate_ora_report(ora_hyp_glm_kegg, title = "Análisis rutas metabólicas sobrerepresentadas para una condición de hipoxia", threshold=0.05, analysis_type = "KEGG", pathways = pathways)

informe_ora_hyp
```

### ¿Qué actividades se encuentran sobrerepresentadas en los organismos mutantes?

Realizamos el mismo análisis basado en el test de Fisher para ver diferencias de sobrerepresentación en el caso de los mutantes. El resultado se muestra en una tabla HTML generada con las colecciones de genes con un p-valor menor a 0.05:

```{r}
#| label: ora_kegg_mut
#| output: false

selected_genes2<-which(tt_upregulated_glm_mut$FDR<0.05)
entrez_selected2<-as.character(tt_annotated_glm_mut[selected_genes2,"ENTREZID"])

ora_mut_glm_kegg<-ora(entrez_selected2, gsc=gscKEGG)
```

Se muestra la tabla HTML, siguiendo el estilo anterior. La descarga también puede hacerse mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_5
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_mut<-generate_ora_report(ora_mut_glm_kegg, title = "Análisis de rutas metabólicas sobrerepresentadas en C. elegans KO para genes de hipoxia", threshold=0.05, analysis_type = "KEGG", pathways = pathways )

informe_ora_mut
```


### ¿Hay alguna colección que indique interacción entre mutantes y la hipoxia?

```{r}
#| label: ora_kegg_int
#| output: false

selected_genes3<-which(tt_annotated_glm_int$FDR<0.05)
entrez_selected3<-as.character(tt_annotated_glm_int[selected_genes3,"ENTREZID"])
ora_int_glm_kegg<-ora(entrez_selected3, gsc=gscKEGG)
```

Usando la función mostrada anteriormente, se pueden mostras aquellos grupos que resulten significativos, así como un enlace a la base de datos GeneOntology, donde se puede obtener más información. La descarga de estos datos se podría realizar mediante la misma función mostrada en el análisis diferencial de genes:

```{r}
#| label: html_ora_6
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_ora_int<-generate_ora_report(ora_int_glm_kegg, title = "Análisis de sobrerepresentación de rutas metabólicas con interacción de mutantes e hipoxia", threshold=0.05, analysis_type = "KEGG", pathways = pathways)

informe_ora_int
```


Tal y como se ha visto a lo largo de los reports, ninguna de las colecciones de la base de datos KEGG se habría visto sobrerepresentada, ya que todos sus p-valores son cercanos a 1, aceptando la hipótesis nula que no habría cambios de expresión por hipoxia, ni al generar *knock-out* para genes que la combaten, ni en su interacción, para ninguna de las colecciones (rutas metabólicas), que incluyen.

# Análisis de grupos de genes

Finalmente, con las colecciones que se han creado y el Summarized Experiment, se realizará un análisis de grupos de genes, usando la función `GenSetTest`, incluída en el paquete `tami`. En todos los casos se evaluará tanto la hipótesis nula auto-contenida (los grupos analizados no tienen genes significativos asociados con su fenotipo), como la nula competitiva (los genes del grupo siguen el mismo patrón que el fenotipo, comparado con el resto de genes). Como este paquete usa un test *edgeR* clásico, no se podrá evaluar la interacción entre ambas variables estudiadas antes (*group* y *mutant*).

## Función de reporte para el Gene Set Analysis

A continuación se muestra la función de reporte en tabla HTML, con las adaptaciones necesarias para leer correctamente la salida del Gene Set Analysis:

```{r}
#| label: html_gsa
generate_gsa_report <- function(df,
                               title = "",
                               analysis_type = c("GO", "KEGG"),
                               threshold = 0.05,
                               pathways = NULL) {
  require(dplyr)
  require(DT)
  require(tami)
  require(htmltools)
  require(tibble)
  require(tidyr)
  
  analysis_type <- match.arg(analysis_type)
  
  # Asegurar que adjp/rawp son numéricos
  df <- df %>%
    mutate(
      adjp = as.numeric(as.character(adjp)),
      rawp = as.numeric(as.character(rawp))
    )
  
  # Renombrar la columna de interés a "Name"
  if (analysis_type == "KEGG") {
    if (!"KEGG" %in% colnames(df)) stop("No existe la columna 'KEGG' en df")
    df <- df %>% rename(Name = KEGG)
  } else {
    if (!"GO" %in% colnames(df)) stop("No existe la columna 'GO' en df")
    df <- df %>% rename(Name = GO)
  }
  
  if (analysis_type == "KEGG") {
    if (!is.null(pathways)) {
      pathway_names <- gsub(" - Caenorhabditis elegans \\(nematode\\)", "", pathways)
      names(pathway_names) <- names(pathways)
    }
    report_df <- df %>%
      filter(!is.na(adjp) & adjp < threshold) %>%
      arrange(adjp) %>%
      mutate(
        ID = Name,
        Activity = if (!is.null(pathways)) {
          ifelse(ID %in% names(pathway_names), pathway_names[ID], ID)
        } else {
          ID
        },
        Link = ifelse(!is.na(ID) & ID != "", tami::kegg2url(ID), NA_character_)
      )
  } else {
    report_df <- df %>%
      filter(!is.na(adjp) & adjp < threshold) %>%
      arrange(adjp) %>%
      mutate(
        GO_ID = sub("_.*", "", Name),
        Activity = Term(GOTERM[GO_ID]),
        Link = ifelse(!is.na(GO_ID) & GO_ID != "", tami::go2url(GO_ID), NA_character_)
      )
  }
  
  report_df <- report_df %>%
    select(Activity, statistic, adjp, Link) %>%
    drop_na(Activity)
  
  DT::datatable(
    report_df,
    escape = FALSE,
    extensions = c('Buttons'),
    options = list(
      dom = 'Bfrtip',
      buttons = c('copy', 'csv', 'excel', 'pdf'),
      pageLength = 10,
      columnDefs = list(
        list(
          targets = 3,
          render = DT::JS("
            function(data, type, row) {
              if (data === null || data === undefined || data === 'NA' || data === '') {
                return '';
              }
              return data;
            }
          "),
          className = 'dt-center'
        )
      ),
      language = list(emptyTable = "No hay datos disponibles")
    ),
    rownames = FALSE,
    class = 'display nowrap'
  )
}
```

## Análisis con la colección de Gene Ontology

Realizaremos primero el análisis con la colección de genes creada a partir de la *Gene Ontology*.

### ¿Qué colecciones están involucradas en la respuesta a la hipoxia?
Se evaluan ambas hipótesis para la variable *dummy* *group*, es decir, para ver diferencias entre la condición de hipoxia o "normoxia". Para la hipótesis auto-contenida:

```{r}
#| label: gst_self_group_go
#| eval: false
eset<-PRJNA701955_SE

PRJNA701955_self_group <- GeneSetTest(
                                x = eset ,y="Group",gsc=gscCe,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                              GeneSetNullDistr ="self-contained",
                                      alternative="less",
                              nmax = 1000,
                              id = "ENTREZID",descriptive=mean)
```

```{r}
#| label: gst_go_1
#| eval: true

load("PRJNA701955_self_group.rda")
print("Número de grupos de genes estadísticamente significativos para la hipótesis auto-contenida en hipoxia, usando la base de datos GO:")

self_group_go <- cbind(as.data.frame(
  PRJNA701955_self_group@GeneSetData),
  as.data.frame(PRJNA701955_self_group@GeneSetStat))

sum(self_group_go$adjp<.05)
```
Veamos cuáles son estas colecciones con una significancia estadística:

```{r}
#| label: html_self_hyp_go
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe__self_go_hyp<-generate_gsa_report(self_group_go, title = "Análisis de grupos de genes GO en condición de hipoxia", threshold=0.05, analysis_type = "GO", pathways = pathways)

informe__self_go_hyp
```
Puede observarse que hay muchos grupos de genes que contienen genes estadísticamente significativos. Para obtener más información sobre esta expresión diferencial por grupos, se evaluará la hipótesis competitiva, para comprobar su asociación al fenotipo.

Y para la hipótesis competitiva:

```{r}
#| label: gst_comp_group_go
#| eval: true
eset<-PRJNA701955_SE
PRJNA701955_comp_group <- GeneSetTest(
                                x =eset ,y="Group",gsc=gscCe,
                                      test = edgercommon,
                                association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                                GeneSetNullDistr ="competitive",
                                      alternative="less",
                                nmax = 1000,
                                id = "ENTREZID",descriptive=mean)
```

```{r}
#| label: gst_go_2
#| eval: true

print("Número de grupos de genes estadísticamente significativos para la hipótesis competitiva en hipoxia, usando la base de datos GO:")
GSA_go_hyp<-PRJNA701955_comp_group@GeneSetStat
signif<-length(which(GSA_go_hyp$adjp<0.05))
signif
```
Así, se confirmaría mediante este análisis que no hay grupos de genes con diferente patrón que el fenotipo, en la condición de hipoxia respecto a un 21 % de oxígeno, aunque muchos grupos sí presentan genes significativos en hipoxia, tanto sobreexpresados, como con una expresión disminuida.

### ¿Qué actividades se encuentran sobrerepresentadas en los organismos mutantes?

Por otro lado, para la variable *dummy* *mutant*, donde evaluaremos la cepa *wild-type* N2 con los *knock-out* para genes relacionados con hipoxia. Para la hipotesis auto-contenida:

```{r}
#| label: gst_self_mutant_go
#| eval: false

PRJNA701955_self_mut <- GeneSetTest(x = eset ,y="mutant",gsc=gscCe,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                              GeneSetNullDistr ="self-contained",
                                      alternative="less",
                              nmax = 1000,
                              id = "ENTREZID",descriptive=mean)
```

```{r}
#| label: gst_go_3
#| eval: true

load("PRJNA701955_self_mut.rda")
print("Número de grupos de genes estadísticamente significativos para la hipótesis auto-contenida en mutantes para genes relacionados con hipoxia, usando la base de datos GO:")
self_mut_go<-data.frame(PRJNA701955_self_mut@GeneSetData,
                        PRJNA701955_self_mut@GeneSetStat)
sum(self_mut_go$adjp<.05)
```
Veamos qué grupos de genes son:

```{r}
#| label: html_self_mut_go
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe__self_go_mut<-generate_gsa_report(self_mut_go, title = "Análisis de grupos de genes GO en mutantes para genes relacionados con hipoxia", threshold=0.05, analysis_type = "GO", pathways = pathways)

informe__self_go_mut
```

En este caso, la mayoría de grupos de genes que tienen genes estadísticamente significativos, rechazando así la hipótesis auto-contenida, están relacionados con procesos que involucran a distintos tipos de ARN, además de los neuroblastos.

Evaluemos la hipótesis competitiva para comprobar si están asociados al fenotipo, o presentan distinto patrón a este:

```{r}
#| label: gst_comp_mutant_go
#| eval: true

PRJNA701955_comp_mut <- GeneSetTest(
                            x =eset ,y="mutant",gsc=gscCe,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                                GeneSetNullDistr ="competitive",
                                alternative="less",nmax = 1000,
                                      id = "ENTREZID",
                                descriptive=mean)
```

```{r}
#| label: gst_go_4
#| eval: true

print("Número de grupos de genes estadísticamente significativos para la hipótesis competitiva para mutantes, respecto a organismos wild type, usando la base de datos GO:")
comp_mut_go<-data.frame(PRJNA701955_comp_mut@GeneSetData,
                        PRJNA701955_comp_mut@GeneSetStat)
sum(comp_mut_go$adjp<.05)
```

En este caso, el grupo de genes estadísticamente significativo que rechaza la hipótesis competitiva y que por tanto, sigue un patrón distinto del fenotipo es el siguiente:

```{r}
#| label: html_comp_mut_go
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_comp_go_mut<-generate_gsa_report(comp_mut_go, title = "Análisis de grupos de genes GO en mutantes para genes relacionados con hipoxia (hipótesis competitiva)", threshold=0.05, analysis_type = "GO", pathways = pathways)

informe_comp_go_mut
```

En este caso, la actividad fosfolipasa no tendría asociación con el fenotipo, aunque este grupo de genes no contenia genes significativos, de acuerdo al análisis de la hipótesis nula auto-contenida.

## Análisis con la colección KEGG

### ¿Qué colecciones están involucradas en la respuesta a la hipoxia?

Si repetimos el proceso, pero evaluando el *Summarized Experiment* mediante la colección de genes creada a partir de *KEGG*. Si en primer lugar evaluamos la variable *Group*, para la hipótesis auto-contenida:

```{r}
#| label: gst_self_group_kegg
#| eval: false

PRJNA701955_self_group_k <- GeneSetTest(x = eset ,y="Group",gsc=gscKEGG,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                              GeneSetNullDistr ="self-contained",
                                      alternative="less",
                              nmax = 1000,
                              id = "ENTREZID",descriptive=mean)
```

```{r}
#| label: gst_kegg_1
#| eval: true

load("PRJNA701955_self_group_k.rda")
print("Número de grupos de genes estadísticamente significativos para la hipótesis auto-contenida en hipoxia, usando la base de datos KEGG:")
self_hyp_k<-data.frame(PRJNA701955_self_group_k@GeneSetData,
                        PRJNA701955_self_group_k@GeneSetStat)
colnames(self_hyp_k)[which(colnames(self_hyp_k) == "GO")] <- "KEGG"

self_hyp_k$KEGG <- ifelse(grepl("^cel", self_hyp_k$KEGG),
                          self_hyp_k$KEGG,
                          paste0("cel", self_hyp_k$KEGG))

sum(self_hyp_k$adjp<.05)
```

```{r}
#| label: html_self_hyp_k
#| warning: false
# echo:false
# Este código no se mostraría, dejando únicamente la salida

informe_comp_k_hyp<-generate_gsa_report(self_hyp_k, title = "Análisis de grupos de genes KEGG en mutantes para genes relacionados con hipoxia (hipótesis auto-contenida)", threshold=0.05, analysis_type = "KEGG", pathways = pathways)

informe_comp_k_hyp
```
En este caso, al evaluar grupos de genes de la colección KEGG, para la hipótesis autocontenida en condiciones de hipoxia, se observa que hay genes significativos que codifican para vías del metabolismo de ácidos grasos, aminoácidos y otras moléculas que regulan el metabolismo redox como el glutatión.
Estas vías podrían estar aumentadas en condiciones de hipoxia, para mantener el equilibrio redox, o para suplir mediante vías anaeróbicas, las necesidades energéticas para mantener la viabilidad celular.

Y si se evalúa la hipótesis competitiva:

```{r}
#| label: gst_comp_hyp_kegg
#| eval: true

PRJNA701955_comp_hyp_k <- GeneSetTest(
                            x =eset ,y="Group",gsc=gscKEGG,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                                GeneSetNullDistr ="competitive",
                                alternative="less",nmax = 1000,
                                      id = "ENTREZID",
                                descriptive=mean)
```

```{r}
#| label: gst_kegg_2
#| eval: true

print("Número de grupos de genes estadísticamente significativos para la hipótesis competitiva en condición de hipoxia, usando la base de datos KEGG:")
GSA_kegg_hyp<-PRJNA701955_comp_hyp_k@GeneSetStat
signif<-length(which(GSA_kegg_hyp$adjp<0.1))
signif
```
No se observa ninguna diferencia con el fenotipo en ninguno de los grupos de genes en el caso de los nemátodos sometidos a hipoxia.

### ¿Qué actividades se encuentran sobrerepresentadas en los organismos mutantes?

Finalmente, si se evalúa para la variable *mutant*, con la hipótesis auto-contenida:

```{r}
#| label: gst_self_mut_kegg
#| eval: false

PRJNA701955_self_mut_k <- GeneSetTest(x = eset ,y="mutant",gsc=gscKEGG,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                              GeneSetNullDistr ="self-contained",
                                      alternative="less",
                              nmax = 1000,
                              id = "ENTREZID",descriptive=mean)
```

```{r}
#| label: gst_kegg_3
#| eval: true

load("PRJNA701955_self_mut_k.rda")
print("Número de grupos de genes estadísticamente significativos para la hipótesis auto-contenida en mutantes para genes relacionados con hipoxia, usando la base de datos KEGG:")
GSA_k_mut_s<-PRJNA701955_self_mut_k@GeneSetStat
signif<-length(which(GSA_k_mut_s$adjp<0.05))
signif
```
No se observa que ningún grupo de genes (vías metabolicas de la colección KEGG) contenga genes estadísticamente significativos en este caso.

Y evaluando la hipótesis competitiva:

```{r}
#| label: gst_comp_mutant_kegg
#| eval: true

PRJNA701955_comp_mutant_k <- GeneSetTest(
                            x =eset ,y="mutant",gsc=gscKEGG,
                                      test = edgercommon,
                                      association="pvalue",
                                      correction="BH",
                                GeneNullDistr = "randomization",
                                GeneSetNullDistr ="competitive",
                                alternative="less",nmax = 1000,
                                      id = "ENTREZID",
                                descriptive=mean)
```

```{r}
#| label: gst_kegg_4
#| eval: true

print("Número de grupos de genes estadísticamente significativos para la hipótesis competitiva para mutantes, respecto a organismos wild type, usando la base de datos KEGG:")
GSA_kegg_mut<-PRJNA701955_comp_mutant_k@GeneSetStat
signif<-length(which(GSA_kegg_mut$adjp<.05))
signif
```
Tal y como era esperable tras todos los resultados obtenidos usando la colección creada a partir de la base de datos KEGG, no hay significancia estadística suficiente para afirmar que hay una ruta metabólica diferentemente expresada en los *knock-out* respecto los nemátodos *wild-type*. En ningún caso se ha podido descartar la hipótesis nula ni para la hipótesis auto-contenida ni para la competitiva. Es decir, los grupos analizados no tienen genes significativos asociados con su fenotipo, y siguen el mismo patrón que el fenotipo, comparado con el resto de genes para ambas condiciones.

# Conclusión

Así, a lo largo de este análisis de RNASeq se ha visto que, aunque sí que hay cambios de expresión en una condición de hipoxia para el nemátodo *Caenoharbditis elegans*, y los mutantes creados a partir de *KO* para genes relacionados con esta, hacen que la expresión de otros mecanismos aumente, no hay interacción entre ambas condiciones, ni a nivel génico prácticamente, ni en funciones que agrupen a varios genes.

A partir de estos genes significatvos estadísticamente, se ha buscado relaciones de sobrerepresentación en grupos de genes donde están incluidos. No obstante, estos grupos de genes también se han comparado íntegramente con el dataset, viendo menos resultados estadísticamente significativos.
En el caso de los nemátodos estudiados en distintas condiciones de oxígeno, se observan vías activadas como disminuidas significativamente. 
Por lo que hace a los mutantes, tal y como era esperable, se activan distintas vías alternativas que permiten tanto mantener el equilibrio redox, como el crecimiento celular. Asimismo, se observa un cambio en el metabolismo, pasando de usar vías metabólicas convencionales, dependientes de oxígeno (como catabolismo de ácidos grasos), a otras adaptadas a la falta de oxígeno ya  condiciones de estrés, como metabolismo de ciertos aminoácidos.

Si finalmente, nos fijamos en los análisis de genes de grupos, los resultados cambian según la colección analizada, cambiando también los resultados según si se analizaba la hipótesis auto-contenida  o competitiva. Asimismo, en algunos aspectos sí se ha podido encontrar un sentido biológico siguiendo las conclusiones anteriores.

En resumen, aunque no existe interacción entre hipoxia y mutantes para genes relacionados con ella, sí que se observan distintas vías adaptativas a las distintas condiciones, sobre todo en el caso del mantenimiento del equilibrio redox y el cambio del metabolismo hacia uno anaeróbico. Tanto en condiciones de hipoxia como al deplecionar distintos genes que permiten la adaptación de *Caenoharbditis elegans*, el equilibrio redox cambia y su reajuste es esencial para la supervivencia de estos animales.